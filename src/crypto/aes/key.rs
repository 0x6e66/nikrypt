use super::{utils::RCON, word::Word};

#[derive(Debug)]
pub enum KeyCreationError {
    WrongLength,
}

#[derive(Debug)]
pub struct Key {
    data: Vec<u8>,
}

impl PartialEq for Key {
    fn eq(&self, other: &Self) -> bool {
        self.data == other.data
    }
}

macro_rules! impl_from_into {
    ($t:tt) => {
        impl From<[u8; $t]> for Key {
            fn from(value: [u8; $t]) -> Self {
                Key {
                    data: Vec::from(value),
                }
            }
        }
    };
}
impl_from_into!(16);
impl_from_into!(24);
impl_from_into!(32);

impl Key {
    pub fn new(data: Vec<u8>) -> Result<Key, KeyCreationError> {
        match data.len() {
            16 | 24 | 32 => Ok(Key { data }),
            _ => Err(KeyCreationError::WrongLength),
        }
    }

    pub fn get_size_in_bytes(&self) -> usize {
        self.data.len()
    }

    pub fn get_round_keys(&self) -> Vec<Word> {
        let (nk, nr) = match self.get_size_in_bytes() {
            16 => (4, 10),
            24 => (6, 12),
            32 => (8, 14),
            _ => unreachable!(),
        };

        let mut w = vec![];
        let mut i = 0;

        while i < nk {
            w.push(Word([
                self.data[4 * i],
                self.data[4 * i + 1],
                self.data[4 * i + 2],
                self.data[4 * i + 3],
            ]));

            i += 1;
        }

        while i <= 4 * nr + 3 {
            let mut word = w[i - 1];

            if i % nk == 0 {
                word = word.rot().sub() ^ RCON[i / nk - 1];
            } else if nk > 6 && i % nk == 4 {
                word = word.sub();
            }

            w.push(w[i - nk] ^ word);
            i += 1;
        }

        w
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn new_key_has_correct_length() {
        let data = vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];
        let correct_key = Key { data: data.clone() };

        let key = Key::new(data);

        assert!(key.is_ok());
        assert_eq!(correct_key, key.unwrap());
    }

    #[test]
    fn new_key_wrong_length_error() {
        let data = vec![0, 1, 2, 3, 4, 5, 6, 7];

        let key = Key::new(data);

        assert!(key.is_err());
    }

    #[test]
    fn get_size_in_bytes() {
        let data = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
        ];
        let key = Key::from(data);

        assert_eq!(data.len(), key.get_size_in_bytes());
    }

    #[test]
    fn key_expansion_128_valid_case() {
        let key = Key::from([
            0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf,
            0x4f, 0x3c,
        ]);

        let correct_round_keys = vec![
            Word([0x2b, 0x7e, 0x15, 0x16]),
            Word([0x28, 0xae, 0xd2, 0xa6]),
            Word([0xab, 0xf7, 0x15, 0x88]),
            Word([0x09, 0xcf, 0x4f, 0x3c]),
            Word([0xa0, 0xfa, 0xfe, 0x17]),
            Word([0x88, 0x54, 0x2c, 0xb1]),
            Word([0x23, 0xa3, 0x39, 0x39]),
            Word([0x2a, 0x6c, 0x76, 0x05]),
            Word([0xf2, 0xc2, 0x95, 0xf2]),
            Word([0x7a, 0x96, 0xb9, 0x43]),
            Word([0x59, 0x35, 0x80, 0x7a]),
            Word([0x73, 0x59, 0xf6, 0x7f]),
            Word([0x3d, 0x80, 0x47, 0x7d]),
            Word([0x47, 0x16, 0xfe, 0x3e]),
            Word([0x1e, 0x23, 0x7e, 0x44]),
            Word([0x6d, 0x7a, 0x88, 0x3b]),
            Word([0xef, 0x44, 0xa5, 0x41]),
            Word([0xa8, 0x52, 0x5b, 0x7f]),
            Word([0xb6, 0x71, 0x25, 0x3b]),
            Word([0xdb, 0x0b, 0xad, 0x00]),
            Word([0xd4, 0xd1, 0xc6, 0xf8]),
            Word([0x7c, 0x83, 0x9d, 0x87]),
            Word([0xca, 0xf2, 0xb8, 0xbc]),
            Word([0x11, 0xf9, 0x15, 0xbc]),
            Word([0x6d, 0x88, 0xa3, 0x7a]),
            Word([0x11, 0x0b, 0x3e, 0xfd]),
            Word([0xdb, 0xf9, 0x86, 0x41]),
            Word([0xca, 0x00, 0x93, 0xfd]),
            Word([0x4e, 0x54, 0xf7, 0x0e]),
            Word([0x5f, 0x5f, 0xc9, 0xf3]),
            Word([0x84, 0xa6, 0x4f, 0xb2]),
            Word([0x4e, 0xa6, 0xdc, 0x4f]),
            Word([0xea, 0xd2, 0x73, 0x21]),
            Word([0xb5, 0x8d, 0xba, 0xd2]),
            Word([0x31, 0x2b, 0xf5, 0x60]),
            Word([0x7f, 0x8d, 0x29, 0x2f]),
            Word([0xac, 0x77, 0x66, 0xf3]),
            Word([0x19, 0xfa, 0xdc, 0x21]),
            Word([0x28, 0xd1, 0x29, 0x41]),
            Word([0x57, 0x5c, 0x00, 0x6e]),
            Word([0xd0, 0x14, 0xf9, 0xa8]),
            Word([0xc9, 0xee, 0x25, 0x89]),
            Word([0xe1, 0x3f, 0x0c, 0xc8]),
            Word([0xb6, 0x63, 0x0c, 0xa6]),
        ];

        let w = key.get_round_keys();

        assert_eq!(correct_round_keys, w);
    }

    #[test]
    fn key_expansion_192_valid_case() {
        let key = Key::from([
            0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90,
            0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b,
        ]);

        let correct_round_keys = vec![
            Word([0x8e, 0x73, 0xb0, 0xf7]),
            Word([0xda, 0x0e, 0x64, 0x52]),
            Word([0xc8, 0x10, 0xf3, 0x2b]),
            Word([0x80, 0x90, 0x79, 0xe5]),
            Word([0x62, 0xf8, 0xea, 0xd2]),
            Word([0x52, 0x2c, 0x6b, 0x7b]),
            Word([0xfe, 0x0c, 0x91, 0xf7]),
            Word([0x24, 0x02, 0xf5, 0xa5]),
            Word([0xec, 0x12, 0x06, 0x8e]),
            Word([0x6c, 0x82, 0x7f, 0x6b]),
            Word([0x0e, 0x7a, 0x95, 0xb9]),
            Word([0x5c, 0x56, 0xfe, 0xc2]),
            Word([0x4d, 0xb7, 0xb4, 0xbd]),
            Word([0x69, 0xb5, 0x41, 0x18]),
            Word([0x85, 0xa7, 0x47, 0x96]),
            Word([0xe9, 0x25, 0x38, 0xfd]),
            Word([0xe7, 0x5f, 0xad, 0x44]),
            Word([0xbb, 0x09, 0x53, 0x86]),
            Word([0x48, 0x5a, 0xf0, 0x57]),
            Word([0x21, 0xef, 0xb1, 0x4f]),
            Word([0xa4, 0x48, 0xf6, 0xd9]),
            Word([0x4d, 0x6d, 0xce, 0x24]),
            Word([0xaa, 0x32, 0x63, 0x60]),
            Word([0x11, 0x3b, 0x30, 0xe6]),
            Word([0xa2, 0x5e, 0x7e, 0xd5]),
            Word([0x83, 0xb1, 0xcf, 0x9a]),
            Word([0x27, 0xf9, 0x39, 0x43]),
            Word([0x6a, 0x94, 0xf7, 0x67]),
            Word([0xc0, 0xa6, 0x94, 0x07]),
            Word([0xd1, 0x9d, 0xa4, 0xe1]),
            Word([0xec, 0x17, 0x86, 0xeb]),
            Word([0x6f, 0xa6, 0x49, 0x71]),
            Word([0x48, 0x5f, 0x70, 0x32]),
            Word([0x22, 0xcb, 0x87, 0x55]),
            Word([0xe2, 0x6d, 0x13, 0x52]),
            Word([0x33, 0xf0, 0xb7, 0xb3]),
            Word([0x40, 0xbe, 0xeb, 0x28]),
            Word([0x2f, 0x18, 0xa2, 0x59]),
            Word([0x67, 0x47, 0xd2, 0x6b]),
            Word([0x45, 0x8c, 0x55, 0x3e]),
            Word([0xa7, 0xe1, 0x46, 0x6c]),
            Word([0x94, 0x11, 0xf1, 0xdf]),
            Word([0x82, 0x1f, 0x75, 0x0a]),
            Word([0xad, 0x07, 0xd7, 0x53]),
            Word([0xca, 0x40, 0x05, 0x38]),
            Word([0x8f, 0xcc, 0x50, 0x06]),
            Word([0x28, 0x2d, 0x16, 0x6a]),
            Word([0xbc, 0x3c, 0xe7, 0xb5]),
            Word([0xe9, 0x8b, 0xa0, 0x6f]),
            Word([0x44, 0x8c, 0x77, 0x3c]),
            Word([0x8e, 0xcc, 0x72, 0x04]),
            Word([0x01, 0x00, 0x22, 0x02]),
        ];

        let w = key.get_round_keys();

        assert_eq!(correct_round_keys, w);
    }

    #[test]
    fn key_expansion_256_valid_case() {
        let key = Key::from([
            0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d,
            0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3,
            0x09, 0x14, 0xdf, 0xf4,
        ]);

        let correct_round_keys = vec![
            Word([0x60, 0x3d, 0xeb, 0x10]),
            Word([0x15, 0xca, 0x71, 0xbe]),
            Word([0x2b, 0x73, 0xae, 0xf0]),
            Word([0x85, 0x7d, 0x77, 0x81]),
            Word([0x1f, 0x35, 0x2c, 0x07]),
            Word([0x3b, 0x61, 0x08, 0xd7]),
            Word([0x2d, 0x98, 0x10, 0xa3]),
            Word([0x09, 0x14, 0xdf, 0xf4]),
            Word([0x9b, 0xa3, 0x54, 0x11]),
            Word([0x8e, 0x69, 0x25, 0xaf]),
            Word([0xa5, 0x1a, 0x8b, 0x5f]),
            Word([0x20, 0x67, 0xfc, 0xde]),
            Word([0xa8, 0xb0, 0x9c, 0x1a]),
            Word([0x93, 0xd1, 0x94, 0xcd]),
            Word([0xbe, 0x49, 0x84, 0x6e]),
            Word([0xb7, 0x5d, 0x5b, 0x9a]),
            Word([0xd5, 0x9a, 0xec, 0xb8]),
            Word([0x5b, 0xf3, 0xc9, 0x17]),
            Word([0xfe, 0xe9, 0x42, 0x48]),
            Word([0xde, 0x8e, 0xbe, 0x96]),
            Word([0xb5, 0xa9, 0x32, 0x8a]),
            Word([0x26, 0x78, 0xa6, 0x47]),
            Word([0x98, 0x31, 0x22, 0x29]),
            Word([0x2f, 0x6c, 0x79, 0xb3]),
            Word([0x81, 0x2c, 0x81, 0xad]),
            Word([0xda, 0xdf, 0x48, 0xba]),
            Word([0x24, 0x36, 0x0a, 0xf2]),
            Word([0xfa, 0xb8, 0xb4, 0x64]),
            Word([0x98, 0xc5, 0xbf, 0xc9]),
            Word([0xbe, 0xbd, 0x19, 0x8e]),
            Word([0x26, 0x8c, 0x3b, 0xa7]),
            Word([0x09, 0xe0, 0x42, 0x14]),
            Word([0x68, 0x00, 0x7b, 0xac]),
            Word([0xb2, 0xdf, 0x33, 0x16]),
            Word([0x96, 0xe9, 0x39, 0xe4]),
            Word([0x6c, 0x51, 0x8d, 0x80]),
            Word([0xc8, 0x14, 0xe2, 0x04]),
            Word([0x76, 0xa9, 0xfb, 0x8a]),
            Word([0x50, 0x25, 0xc0, 0x2d]),
            Word([0x59, 0xc5, 0x82, 0x39]),
            Word([0xde, 0x13, 0x69, 0x67]),
            Word([0x6c, 0xcc, 0x5a, 0x71]),
            Word([0xfa, 0x25, 0x63, 0x95]),
            Word([0x96, 0x74, 0xee, 0x15]),
            Word([0x58, 0x86, 0xca, 0x5d]),
            Word([0x2e, 0x2f, 0x31, 0xd7]),
            Word([0x7e, 0x0a, 0xf1, 0xfa]),
            Word([0x27, 0xcf, 0x73, 0xc3]),
            Word([0x74, 0x9c, 0x47, 0xab]),
            Word([0x18, 0x50, 0x1d, 0xda]),
            Word([0xe2, 0x75, 0x7e, 0x4f]),
            Word([0x74, 0x01, 0x90, 0x5a]),
            Word([0xca, 0xfa, 0xaa, 0xe3]),
            Word([0xe4, 0xd5, 0x9b, 0x34]),
            Word([0x9a, 0xdf, 0x6a, 0xce]),
            Word([0xbd, 0x10, 0x19, 0x0d]),
            Word([0xfe, 0x48, 0x90, 0xd1]),
            Word([0xe6, 0x18, 0x8d, 0x0b]),
            Word([0x04, 0x6d, 0xf3, 0x44]),
            Word([0x70, 0x6c, 0x63, 0x1e]),
        ];

        let w = key.get_round_keys();

        assert_eq!(correct_round_keys, w);
    }
}
